Η  συνάρτηση κόστους είναι cpi*(10*(l1i+l1d)+2*l2+3*cacheline+1.5*(assoc1i+assoc1d+assoc2)=f
Οπως ειναι γνωστό η μνημη πρώτου επιπέδου ειναι αρκετά πιο ακριβη απο του δευτέρου για αυτο 
και εχει συντελεστή 10 ενω η αλλη 2.Το cache line έχει και αυτο κόστος με συντελεστή 3, ενώ 
λιγότερο κοστοβόρα ειναι τα assoc1i assoc1d ,assoc2.Τα πολλαπλασιάζουμε όλα αυτά με το cpi
ωστε να έχουμε ενα καλύτερο μέτρο σύγκρισης ώστε να αποτυπώνεται και η βελτίωση στην απόδοση
που προσφέρει κάθε αλλαγή των παραμέτρων.Για παράδειγμα καλύτερη απόδοση σημαίνει μικρότερο
cpi άρα η f θα έχει μικρότερη τιμή και άρα  ''μας υποδικνύει'' ποιος συνδιασμός συμφέρει απο
αποψη σχεδίασης-κόστους.
Για το benchmark specbzip η δοκιμη με l1=64 kB L2=128 associd=2 assoc2=8 και cache line 128 δινει cpi 1.65  και εχει τιμή κόστους 2.141,7 που είναι η πιο συμφερουσα
Για το speclibm η πιο συμφερουσα επιλογη ειναι αυτη με l1=96 l2=1024 associd=2 assoc2=8 cache line=256 και cpi=1.655 και δινει κόστος 6.260,1
Για το specmcf η πιο συμφερουσα επιλογη ειναι αυτη με l1=64 l2=256 associd=2 assoc=8 cache line=128 cpi 1.08 και εχει κοστος 1.678,32
Για το spechmmer επιλεγουμε l1=64 l2=128 associd=2 assoc=8 cache line=64  cpi 1,195 με κοστος 1.321,67
Για το specsjeng l1=64 l2=128 associd=2 assoc2=8 cache line=256  με τελικό κόστος 6.250,312
Οι συμβιβασμοι που πρεπει να γινουν ειναι μικρη κρυφη μνημη πρωτου επιπεδου λογω υψηλου συντελεστη κοστους assosiativity (i, d ,l2) (2,2,8) λογο της συμβολης τους στο χαμηλο cpi για δεδομενες τιμες μνημης, και  οσο το δυνατον μικρότερο block size επειδη εχει συντελεστη 3 και σε  μεγαλες τιμες ανεβάζει το κόστος.
